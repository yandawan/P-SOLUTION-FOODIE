logging:
  pattern:
    dateformat: HH:mm:ss
mybatis:
  mapper-locations: /mybatis/*.xml

spring:
  shardingsphere:
    datasource:
      names: ds0,ms1,slave0
      ds0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3321/sharding_order
        password: 123456
        type: com.zaxxer.hikari.HikariDataSource
        username: root
      ms1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3320/shard_order
        password: 123456
        type: com.zaxxer.hikari.HikariDataSource
        username: root
      slave0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3322/sharding_order
        password: 123456
        type: com.zaxxer.hikari.HikariDataSource
        username: root
    sharding:
      broadcast-tables: area
      master-slave-rules:
        ms0:
          load-balance-algorithm-type: RANDOM
          master-data-source-name: ds0
          slave-data-source-names: slave0
      tables:
        t_order:
          actual-data-nodes: ms$->{0..1}.t_order_$->{1..2}
          # 数据库切分
          database-strategy:
            inline:
              algorithm-expression: ms$->{user_id % 2}
              sharding-column: user_id
          # 表切分
          table-strategy:
            standard:
              precise-algorithm-class-name: com.example.shardingjdbcdemo.sharding.MySharding
              sharding-column: order_id
          key-generator:
            column: order_id
            props:
              max:
                tolerate:
                  time:
                    difference:
                      milliseconds: 10
              worker:
                id: 345
            type: SNOWFLAKE

